(setq visible-bell t)
(fset 'yes-or-no-p 'y-or-n-p)

(setq initial-scratch-message "
      Small cheatsheet:

      C-c C-space : Ace jump
      C-x C-space : Ace pop back

      C-c C-k :  copy the current line

      C-c m : compile

      C-! : Hippie expand
      C-: :
      C-; : expand line

      C-c t : google-translate
      C-c r : reverse translate

      C-c i : indent

      C-> : multiple cursor
      C-< :

      C-c > : indent right
      C-c < : indent left

      C-= : expend selection region

      C-* : ispell word

      S-up : navigate through markers
      S-down :
      C-space : put marker
      C-u C-space : jump to marker

      C-x r s : save to register
      C-x r i : copy register

      C-a : go to begining of line
      C-e : end

      S-enter : indent insert new line below
      C-S-enter

      C-x u : undo-tree
          q : quit
        C-q : abort
        C-8: redo

      C-x C-y : browse kill ring

      s-left : navigate between tabs
      s-right :

      C-x C-v RET: reload file from disk

      M-t : rtags jump to definition
      M-r : jump back
      M-s : find symbol
      M-i : symbol info

      C-c ; : simultaneous edit different regions with same string

      C-x r l: list bookmarks
      C-x r m: add bookmark
      C-x r b: jump to bookmark

      ")



;; alias qrr for interactiv regexp replace
(defalias 'qrr 'query-replace-regexp)

;; hide toolbar
(tool-bar-mode -1)

;; zone: screensaver 10min
;; (setq zone-timer (run-with-idle-timer 600 t 'zone))

;; highlight current line (fucked in terminal???)
(if window-system (global-hl-line-mode 1))
(if window-system (set-face-background 'hl-line "#333"))

;;show in which function we are (tends to freeze with python)
;; (which-func-mode 1)

;; line number at left?
(global-linum-mode t)

;; delete the selection when DEL of C-y
(delete-selection-mode 1)

;; just remove the trailing whitespaces when saving
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; marmalade package repo
(require 'package)
(add-to-list 'package-archives
    '("marmalade" .
      "http://marmalade-repo.org/packages/"))

(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)


;; (let ((base "~/.emacs.d/"))
;;   (add-to-list 'load-path base)
;;   (dolist (f (directory-files base))
;;     (let ((name (concat base "/" f)))
;;       (when (and (file-directory-p name)
;;                  (not (equal f ".."))
;;                  (not (equal f ".")))
;;         (add-to-list 'load-path name)))))


;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))


;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)


;; Comment/uncomment block
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

;; (global-set-key (kbd "C-c c") 'comment-or-uncomment-region)
;; (global-set-key (kbd "C-c u") 'uncomment-region)

(global-set-key (kbd "C-c c") 'comment-or-uncomment-region-or-line)
(global-set-key (kbd "C-c u") 'uncomment-region)

;; /* */ comment style for c++?
;; (defun my-c++-mode-hook ()
;;   (c-set-style "stroustrup")
;;   (set (make-local-variable 'comment-start) "/* ")
;;   (set (make-local-variable 'comment-end) " */"))
;; (add-hook 'c++-mode-hook 'my-c++-mode-hook)


;; move cursor by camelCase
(subword-mode 1)

;; Cycle between snake case, camel case, etc.
(require 'string-inflection)
(global-set-key (kbd "C-c p") 'string-inflection-cycle)
(global-set-key (kbd "C-c O") 'string-inflection-camelcase)        ;; Force to CamelCase
(global-set-key (kbd "C-c o") 'string-inflection-lower-camelcase)  ;; Force to lowerCamelCase
(global-set-key (kbd "C-c P") 'string-inflection-underscore-function)  ;; Force to underscore


;; experimental super awesome nyan-mode
(add-to-list 'load-path "~/.emacs.d/site-lisp/nyan-mode")
(setq nyan-wavy-trail t)
(require 'nyan-mode)

;; Org to s5 html presentation
(add-to-list 'load-path "~/.emacs.d/site-lisp/org-s5")
(require 'org-s5)

;; copy the current line
(defun copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
  (interactive "p")
  (let ((beg (line-beginning-position))
	(end (line-end-position arg)))
    (when mark-active
      (if (> (point) (mark))
	  (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
	(setq end (save-excursion (goto-char (mark)) (line-end-position)))))
    (if (eq last-command 'copy-line)
	(kill-append (buffer-substring beg end) (< end beg))
      (kill-ring-save beg end)))
  (kill-append "\n" nil)
  (beginning-of-line (or (and arg (1+ arg)) 2))
  (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

;; set key binding
(global-set-key "\C-c\C-k" 'copy-line)

;; Browse the kill ring+ M-x package install browse-kill-ring+
(require 'browse-kill-ring+)
(global-set-key (kbd "C-x C-y") 'browse-kill-ring)

;; undo tree
(add-to-list 'load-path "~/.emacs.d/site-lisp/undo-tree")
(require 'undo-tree)
(global-undo-tree-mode)
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-8") 'redo)


;; tabbar
(add-to-list 'load-path "~/.emacs.d/site-lisp/tabbar")
(require 'tabbar)
(global-set-key [s-left] 'tabbar-backward-tab)
(global-set-key [s-right] 'tabbar-forward-tab)

;; tabbar/ruler
(add-to-list 'load-path "~/.emacs.d/site-lisp/tabbar-ruler.el")
(setq tabbar-ruler-global-tabbar t) ; If you want tabbar
;; (setq tabbar-ruler-global-ruler t) ; if you want a global ruler
;; (setq tabbar-ruler-popup-menu t) ; If you want a popup menu.
;; (setq tabbar-ruler-popup-toolbar t) ; If you want a popup toolbar
;; (setq tabbar-ruler-popup-scrollbar t) ; If you want to only show the
                                      ; scroll bar when your mouse is moving.
(require 'tabbar-ruler)

;; indication of the 70 char colum
(add-to-list 'load-path "~/.emacs.d/site-lisp/fill-column-indicator")
(require 'fill-column-indicator)
;; (define-globalized-minor-mode
;;  global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; (global-fci-mode t)


;; tab completion. Sometimes...
(setq tab-always-indent 'complete)
(add-to-list 'completion-styles 'initials t)

;; auto-complete
(require 'auto-complete)
(global-auto-complete-mode t)
(require 'auto-complete-config)
(ac-config-default)

;; yasnippet
(require 'yasnippet)
(yas-global-mode 1)

;; Save point position between sessions
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))

;; ==== Save command histories ====

;; See
;; http://stackoverflow.com/questions/1229142/how-can-i-save-my-mini-buffer-history-in-emacs
(setq savehist-additional-variables
      '(kill-ring search-ring regexp-search-ring))
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)



;; ace jump mode major function
(add-to-list 'load-path "~/.emacs.d/site-lisp/ace-jump-mode.el")
(require 'ace-jump-mode)
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
;; (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(global-set-key (kbd "C-c C-SPC") 'ace-jump-mode)

(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(global-set-key (kbd "C-x C-SPC") 'ace-jump-mode-pop-mark)

(defun smart-open-line ()
  "Insert an empty line after the current line.
Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  "Insert an empty line above the current line.
Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key [(control shift return)] 'smart-open-line-above)
(global-set-key [(shift return)] 'smart-open-line)



;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
;; nope
;; (afp-setup-recommended-hooks)
;; better
(add-to-list 'load-path "~/.emacs.d/site-lisp/filladapt")
(require 'filladapt)
(add-hook 'text-mode-hook 'turn-on-filladapt-mode)



;; ;; ace jump mode major function
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/ace-jump-mode")
;; (require 'ace-jump-mode)
;; (autoload
;;   'ace-jump-mode
;;   "ace-jump-mode"
;;   "Emacs quick move minor mode"
;;   t)
;; (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; (eval-after-load "ace-jump-mode"
;;   '(ace-jump-mode-enable-mark-sync))
;; (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)


;; compile mode
;; Close the compilation window if there was no error at all.
;; (setq compilation-exit-message-function
;;       (lambda (status code msg)
;;         ;; If M-x compile exists with a 0
;;         (when (and (eq status 'exit) (zerop code))
;;           ;; then bury the *compilation* buffer, so that C-x b doesn't go there
;; 	  (bury-buffer "*compilation*")
;; 	  ;; and return to whatever were looking at before
;; 	  (replace-buffer-in-windows "*compilation*"))
;;         ;; Always return the anticipated result of compilation-exit-message-function
;; 	(cons msg code)))


;; (defun bury-compile-buffer-if-successful (buffer string)
;;   "Bury a compilation buffer if succeeded without warnings "
;;   (if (and
;;        (string-match "compilation" (buffer-name buffer))
;;        (string-match "finished" string)
;;        (not
;;         (with-current-buffer buffer
;;           (search-forward "warning" nil t))))
;;       (run-with-timer 1 nil
;;                       (lambda (buf)
;;                         (bury-buffer buf)
;;                         (switch-to-prev-buffer (get-buffer-window buf) 'kill))
;;                       buffer)))

(defun kill-compile-buffer (buffer string)
  (kill-buffer-and-window)
  )

(add-hook 'compilation-finish-functions 'kill-compile-buffer)

(global-set-key (kbd "C-c m") 'compile)

;; for dead keys??
;;(require 'iso-transl)

;; Hippie expand

(add-to-list 'load-path "~/.emacs.d/site-lisp/hippie-expand")
(global-set-key (kbd "C-!") 'hippie-expand)
(global-set-key (kbd "C-:") 'hippie-expand-no-case-fold)
(global-set-key (kbd "C-;") 'hippie-expand-lines)

;; google translate
(add-to-list 'load-path "~/.emacs.d/site-lisp/google-translate")
(require 'google-translate)
(global-set-key (kbd "C-c T") 'google-translate-at-point)
(global-set-key (kbd "C-c t") 'google-translate-query-translate)
(global-set-key (kbd "C-c R") 'google-translate-at-point-reverse)
(global-set-key (kbd "C-c r") 'google-translate-query-translate-reverse)

(setq google-translate-default-target-language "en")
(setq google-translate-default-source-language "fr")
(setq google-translate-enable-ido-completion t)



;; magit, for git...
;; (add-to-l;; ist 'load-path "~/.emacs.d/site-lisp/elpa/cl-lib-0.2/")
;; (require 'cl-lib)
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/magit")
;; (require 'magit)


;; indent

(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (indent-buffer)
        (message "Indented buffer.")))))

(global-set-key (kbd "C-c i") 'indent-region-or-buffer)

;; highlight indentation
(add-to-list 'load-path "~/.emacs.d/site-lisp/Highlight-Indentation-for-Emacs")
(require 'highlight-indentation)
;; (set-face-background 'highlight-indentation-face "#696969")
;; (set-face-background 'highlight-indentation-current-column-face "#a9a9a9")
(set-face-background 'highlight-indentation-face "#2f4f4f")
(set-face-background 'highlight-indentation-current-column-face "#708090")
(add-hook 'python-mode-hook 'highlight-indentation-mode)
(add-hook 'python-mode-hook 'highlight-indentation-current-column-mode)

;;pas mal
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/indent-hint")
;; (require 'visual-indentation-mode)


;; ibuffer, can be usefull
(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
(setq ibuffer-default-sorting-mode 'major-mode)

;; multiple-cursors
(add-to-list 'load-path "~/.emacs.d/site-lisp/multiple-cursors")
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;(require 'tex-site)
;;(require 'psvn)
;; (add-to-list 'vc-handled-backends 'SVN)


;; marker-visit, easily navigate through markers
(add-to-list 'load-path "~/.emacs.d/site-lisp/marker-visit")
(require 'marker-visit)
(global-set-key (kbd "S-<up>") 'marker-visit-prev)
(global-set-key (kbd "S-<down>") 'marker-visit-next)

;; visible mark
(add-to-list 'load-path "~/.emacs.d/site-lisp/visible-mark")

(defface visible-mark-active ;; put this before (require 'visible-mark)
  '((((type tty) (class mono)))
    (t (:background "magenta"))) "")
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1 my-visible-mark-face2))

(require 'visible-mark)
(global-visible-mark-mode 1)




;; helm TODO: one day switch ido/smex to helm
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/helm")
;; (require 'helm-config)
;; (global-set-key (kbd "C-c h") 'helm-mini)
;; (helm-mode 1)



;; ido completion. Much better
(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defvar ido-enable-replace-completing-read t
"If t, use ido-completing-read instead of completing-read if possible.

Set it to nil using let in around-advice for functions where the
original completing-read is required.  For example, if a function
foo absolutely must use the original completing-read, define some
advice lik this:

(defadvice foo (around original-completing-read-only activate)
(let (ido-enable-replace-completing-read) ad-do-it))")

;; Replace completing-read wherever possible, unless directed otherwise
(defadvice completing-read
(around use-ido-when-possible activate)
(if (or (not ido-enable-replace-completing-read) ; Manual override disable ido
(and (boundp 'ido-cur-list)
ido-cur-list)) ; Avoid infinite loop from ido calling this
ad-do-it
(let ((allcomp (all-completions "" collection predicate)))
(if allcomp
(setq ad-return-value
(ido-completing-read prompt
allcomp
nil require-match initial-input hist def))
ad-do-it))))



;;and smex (goes with ido)
(add-to-list 'load-path "~/.emacs.d/site-lisp/smex")
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
					; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)


;; minimap
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-minimap")
;; (require 'minimap)

;; other minimap (sublimity)
(add-to-list 'load-path "~/.emacs.d/site-lisp/sublimity")
(require 'sublimity)
(require 'sublimity-scroll)
(require 'sublimity-map)
;; (require 'sublimity-attractive)
(sublimity-map-set-delay nil)
;; (setq sublimity-scroll-weight 10
;;       sublimity-scroll-drift-length 5)


;; expend-region
(add-to-list 'load-path "~/.emacs.d/site-lisp/expand-region")
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)


;; org-mode
(require 'org-install)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
;; (setq org-agenda-files (list "~/pulse/Sync/Org/todo.org"))
(setq org-agenda-files '("~/Project/Repo/org"))


;; org header bullets
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

;; beautiful bullets for org
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; org italics
(setq org-hide-emphasis-markers t)

;; org better header

(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.75))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.25))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
 )


(add-hook 'org-mode-hook
	  (lambda ()
	    (setq-local yas/trigger-key [tab])
	    (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))

(add-hook 'org-mode-hook 'turn-off-filladapt-mode) ;; filladapt doesn't work with org

;; json-mode
;; (require 'json-mode)

;; LATEX

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(setq-default TeX-master nil)
(setq TeX-PDF-mode t) ;pdflatex

(add-hook 'LaTeX-mode-hook 'visual-line-mode) ;or auto-fill-mode ?
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'ac-latex-mode-setup)
(ac-flyspell-workaround)

;reftex
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
;(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'reftex-load-hook 'imenu-add-menubar-index)
(add-hook 'reftex-mode-hook 'imenu-add-menubar-index)
;For high-speed access, one can bind the imenu to a right mouse click:
(global-set-key [down-mouse-3] 'imenu)


;flymake latex syntax checking
(require 'flymake)
(defun flymake-get-tex-args (file-name)
(list "pdflatex"
(list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))
(add-hook 'LaTeX-mode-hook 'flymake-mode)

;outline mode, allow section folding
(defun turn-on-outline-minor-mode ()
(outline-minor-mode 1))
(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
(add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
(setq outline-minor-mode-prefix "\C-c \C-o") ; Or something else


;; Okular

;; (setq TeX-view-program-list '(("Okular" "okular --unique %u")))

;; (add-hook 'LaTeX-mode-hook '(lambda ()
;;                   (add-to-list 'TeX-expand-list
;;                        '("%u" Okular-make-url))))

;; (defun Okular-make-url () (concat
;;                "file://"
;;                (expand-file-name (funcall file (TeX-output-extension) t)
;;                          (file-name-directory (TeX-master-file)))
;;                "#src:"
;;                (TeX-current-line)
;;                (expand-file-name (TeX-master-directory))
;;                "./"
;;                (TeX-current-file-name-master-relative)))

;; (setq TeX-view-program-selection '((output-pdf "Okular")))

;;don't work?
;;(server-start)

;; (TeX-source-specials-mode t)
;; (setq TeX-source-specials-tex-flags "-src-specials -synctex=1")
(add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
'(LaTeX-command "latex -synctex=1")
'(TeX-output-view-style '(("^pdf$" "." "okular %s.pdf")))



;; Python Hook
(add-hook 'python-mode-hook
          (function (lambda ()
                      (setq indent-tabs-mode nil
                            tab-width 4))))


;; smart operator, adding spaces between operators for python
(add-to-list 'load-path "~/.emacs.d/site-lisp/smart-operator")
(require 'smart-operator)
(add-hook 'python-mode-hook 'smart-operator-mode)

;; syntax checking
(require 'flycheck-pyflakes)
(add-hook 'python-mode-hook 'flycheck-mode)

;; disable the slow ones
(add-to-list 'flycheck-disabled-checkers 'python-flake8)
(add-to-list 'flycheck-disabled-checkers 'python-pylint)


;; Jedi python completion
;; (setq jedi:setup-keys t)
;; (add-hook 'python-mode-hook 'jedi:setup)

(require 'epc)
(setq jedi:setup-keys t)
(autoload 'jedi:setup "jedi" nil t)
;; (add-hook 'python-mode-hook 'auto-complete-mode)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:key-complete (kbd "<C-tab>"))
(setq jedi:complete-on-dot t)

(setq jedi:server-command '("python" "/home/steve/.emacs.d/elpa/jedi/jediepcserver.py"))
(setq jedi:tooltip-method '(pos-tip))


;; Configure flymake with pylint for Python
 ;; (when (load "flymake" t)
 ;;      (defun flymake-pylint-init ()
 ;;        (let* ((temp-file (flymake-init-create-temp-buffer-copy
 ;;                           'flymake-create-temp-inplace))
 ;;           (local-file (file-relative-name
 ;;                        temp-file
 ;;                        (file-name-directory buffer-file-name))))
 ;;          (list "epylint" (list local-file))))
 ;;          (add-to-list 'flymake-allowed-file-name-masks
 ;; 		       '("\\.py\\'" flymake-pylint-init)))


;; configure flymake with pep8 for python
;; (when (load "flymake" t)
;;  (defun flymake-pylint-init ()
;;    (let* ((temp-file (flymake-init-create-temp-buffer-copy
;;                       'flymake-create-temp-inplace))
;;           (local-file (file-relative-name
;;                        temp-file
;;                        (file-name-directory buffer-file-name))))
;;          (list "pep8" (list "--repeat" local-file))))

;;  (add-to-list 'flymake-allowed-file-name-masks
;;               '("\\.py\\'" flymake-pylint-init)))

;; (defun my-flymake-show-help ()
;;   (when (get-char-property (point) 'flymake-overlay)
;;     (let ((help (get-char-property (point) 'help-echo)))
;;       (if help (message "%s" help)))))

;; (add-hook 'post-command-hook 'my-flymake-show-help)

;; Set as a minor mode for Python
;; (add-hook 'python-mode-hook '(lambda () (flymake-mode)))


;;auto pep8 M-x package-install py-autopep8 (sudo pip install pep8 autopep8)
(require 'py-autopep8)
(add-hook 'before-save-hook 'py-autopep8-before-save)

;;ein ipython notebook
;;M-x package-install websocket
;;M-x package-install request

;; (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-websocket")
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-request")
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-ipython-notebook/")
;; (require 'websocket)
;; (require 'request)
;; (require 'ein)
;; (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)

;; (setq ein:use-auto-complete t)
;; (setq ein:use-auto-complete-superpack t)

;; (require 'anything-config)
;; (require 'lacarte)

;; (setq LaTeX-math-menu-unicode t)
;; (define-key LaTeX-mode-map [?\M-`] 'anything-math-symbols)

;; (defvar anything-c-source-lacarte-math
;;   '((name . "Math Symbols")
;;     (init . (lambda()
;; 	      (setq anything-c-lacarte-major-mode major-mode)))
;;     (candidates
;;      . (lambda () (if (eq anything-c-lacarte-major-mode 'latex-mode)
;; 		      (delete '(nil) (lacarte-get-a-menu-item-alist LaTeX-math-mode-map)))))
;;     (action . (("Open" . (lambda (candidate)
;; 			   (call-interactively candidate)))))))

;; (defun anything-math-symbols ()
;;   "Anything for searching math menus"
;;   (interactive)
;;   (anything '(anything-c-source-lacarte-math)
;; 	    (thing-at-point 'symbol) "Symbol: "
;; 	    nil nil "*anything math symbols*"))





;; predictive mode



(add-to-list 'load-path "~/.emacs.d/site-lisp/predictive")
(add-to-list 'load-path "~/.emacs.d/site-lisp/predictive/html")
(add-to-list 'load-path "~/.emacs.d/site-lisp/predictive/latex")
(add-to-list 'load-path "~/.emacs.d/site-lisp/predictive/texinfo")
(require 'predictive)
(autoload 'predictive-mode "predictive" "predictive" t)
(set-default 'predictive-auto-add-to-dict t)
(setq ;predictive-main-dict 'steve-dictionary
      predictive-auto-learn t
      predictive-add-to-dict-ask nil
      predictive-use-auto-learn-cache nil
      predictive-which-dict t)






(setq user-full-name "Steve NGUYEN")
(setq user-mail-address "steve.nguyen.000@gmail.com")

;; (autoload 'say-minor-mode "festival" "Menu for using Festival." t)
;; (say-minor-mode t)
;; (setq auto-mode-alist
;;       (append '(("\\.festivalrc$" . scheme-mode)) auto-mode-alist))

;; (require 'gtranslate)

;; (autoload 'babel "babel"
;;     "Use a web translation service to translate the message MSG." t)
;; (autoload 'babel-region "babel"
;;     "Use a web translation service to translate the current region." t)
;; (autoload 'babel-as-string "babel"
;;     "Use a web translation service to translate MSG, returning a string." t)
;; (autoload 'babel-buffer "babel"
;;     "Use a web translation service to translate the current buffer." t)



(setq selection-coding-system 'compound-text-with-extensions)
;; utf-8
;;

(setq locale-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)


(setq x-super-keysym 'super)  ;;windows key is super (default)


;; web mode
(add-to-list 'load-path "~/.emacs.d/site-lisp/web-mode")
(require 'web-mode)
(add-to-list 'ac-modes 'web-mode)

(setq auto-mode-alist
      '(
	("\\.txt$" . text-mode)
	("\\.sgml$" . sgml-mode)
        ("\\.C$"  . c++-mode)
        ("\\.cc$" . c++-mode)
	("\\.hh$" . c++-mode)
	("\\.cpp$" . c++-mode)
	("\\.cxx$" . c++-mode)
	("\\.hpp$" . c++-mode)
        ("\\.c$"  . c-mode)
        ("\\.h$"  . c++-mode)
	("\\.py$" . python-mode)
        ("\\.el$" . emacs-lisp-mode)
        ("\\.emacs$" . emacs-lisp-mode)
        ("\\.gnus$" . emacs-lisp-mode)
        ("\\.scm$" . scheme-mode)
        ("\\.l$" . lisp-mode)
        ("\\.lisp$" . lisp-mode)
        ("\\.f$" . fortran-mode)
        ("\\.awk$" . awk-mode )
	("\\.pl$" . perl-mode )
        ("\\.tex$" . latex-mode )
        ("\\.sh$" . sh-mode )
        ("\\.html$" . web-mode)
        ("\\.shtml$" . web-mode)
	("\\.php3$" . web-mode)
	("\\.phtml$" . web-mode)
	("\\.css$" . web-mode)
	("\\.js$" . web-mode)
	("\\.vhdl$" . vhdl-mode)
	("\\.vhd$" . vhdl-mode)
        ("M?[Mm]akefile$" . makefile-mode)
        ("\\.mk$" . makefile-mode)
	("\\.org$" . org-mode)
	("\\.bib$" . bibtex-mode)
	("\\.json$" . json-mode)
	)
      )


;; prepare the adaptive text fill for c-mode
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (when (featurep 'filladapt)
	      (c-setup-filladapt))))


(setq-default ispell-program-name "aspell")
(setq ispell-local-dictionary "francais")
;; Pour que F2 lance flyspell
(setq flyspell-default-dictionary "francais")
;;(global-set-key [f2] 'flyspell-mode)
(global-set-key (kbd "C-*") 'ispell-word)


;; (setq ispell-dictionary "francais")
;; (require 'ispell)
;; (add-hook 'text-mode-hook
;; 	  '(lambda () (ispell-minor-mode 1) ))
;; (ispell-change-dictionary "francais")


;;       (autoload 'ispell-word "ispell"
;;          "Check the spelling of word in buffer." t)
;;       (global-set-key "\e$" 'ispell-word)
;;       (autoload 'ispell-region "ispell"
;;          "Check the spelling of region." t)
;;       (autoload 'ispell-buffer "ispell"
;;          "Check the spelling of buffer." t)
;;       (autoload 'ispell-complete-word "ispell"
;;          "Look up current word in dictionary and try to complete it." t)
;;       (autoload 'ispell-change-dictionary "ispell"
;;          "Change ispell dictionary." t)
;;       (autoload 'ispell-message "ispell"
;;          "Check spelling of mail message or news post.")
;;       (autoload 'ispell-minor-mode "ispell"
;;          "Toggle mode to automatically spell check words as they are typed in.")
;;        (setq sgml-mode-hook
;;       '(lambda () "Défauts pour le mode SGML."
;;       (setq ispell-personal-dictionary "~/.ispell-dico-perso")
;;       (ispell-change-dictionary "francais")
;;        ))


;(add-hook 'find-file-hooks 'auto-insert)
;(setq auto-insert-directory (expand-file-name "~/.autoinsert/"))
;(auto-insert-mode 1)

;(setq auto-insert-query t) ;; prompt before insertion

; (setq auto-insert-alist
;       '(("\.c"  . "c-template.c")
; 	("\.cc"   . "c-template.c")
; 	("\.cpp"  . "c-template.c")
; 	("\.h"  . "c-template.c")
; 	("\.hh"  . "c-template.c")
; 	("\.hpp" . "c-template.c")))






    ;; auto-insert stuff
(add-hook 'find-file-hooks 'auto-insert)
(setq auto-insert-directory (concat (getenv "HOME") "/.emacs_auto/"))
(setq auto-insert-alist
      '(
	("\\.cpp$" . ["insert.cpp" auto-update-c-source-file])
	("\\.cc$" . ["insert.cc" auto-update-c-source-file])
	("\\.h$"   . ["insert.h" auto-update-header-file])
	("\\.hpp$"   . ["insert.hpp" auto-update-header-file])
	("\\.c$" . ["insert.c" auto-update-c-source-file])
	("\\.py$" . ["insert.py" auto-update-header-file])
	))
;; (setq auto-insert 'other)

;; function replaces the string '@@@' by the current file
;; name. You could use a similar approach to insert name and date into
;; your file.
(defun auto-update-header-file ()
  (save-excursion
    (while (search-forward "@@@" nil t)
      (save-restriction
	(narrow-to-region (match-beginning 0) (match-end 0))
	(replace-match (upcase (file-name-nondirectory buffer-file-name)))
	(subst-char-in-region (point-min) (point-max) ?. ?_)
	(subst-char-in-region (point-min) (point-max) ?- ?_)
	))
    )
  (save-excursion
    ;; Replace &&& with file name
    (while (search-forward "&&&" nil t)
      (save-restriction
	(narrow-to-region (match-beginning 0) (match-end 0))
	(replace-match (file-name-nondirectory buffer-file-name) t)
	))
    )

  (save-excursion
    ;; replace DDDD with today's date
    (while (search-forward "DDDD" nil t)
      (save-restriction
	(narrow-to-region (match-beginning 0) (match-end 0))
	(replace-match "" t)
	(insert-today)
	))
    )
  )

(defun insert-today ()
"Insert today's date into buffer"
(interactive)
(insert (format-time-string "%A, %B %e %Y" (current-time))))

(defun auto-update-c-source-file ()
(save-excursion
  ;; Replace HHHH with file name sans suffix
  (while (search-forward "HHHH" nil t)
    (save-restriction
      (narrow-to-region (match-beginning 0) (match-end 0))
      (replace-match (concat (file-name-sans-extension (file-name-nondirectory buffer-file-name)) ".h") t
		     )
      ))
  )
(save-excursion
  ;; Replace @@@ with file name
  (while (search-forward "@@@" nil t)
    (save-restriction
      (narrow-to-region (match-beginning 0) (match-end 0))
      (replace-match (file-name-nondirectory buffer-file-name))
      ))
  )
(save-excursion
  ;; replace DDDD with today's date
  (while (search-forward "DDDD" nil t)
    (save-restriction
      (narrow-to-region (match-beginning 0) (match-end 0))
      (replace-match "")
      (insert-today)
      ))
  )
)


;; if you create a file called Test.hpp, this function will replace:
;; @@@ with TEST and ||| with Test


;; (defun auto-update-header-file ()
;;   (save-excursion
;;     (while (search-forward "@@@" nil t)
;;       (save-restriction
;; 	(narrow-to-region (match-beginning 0) (match-end 0))
;; 	(replace-match
;; 	 (upcase
;; 	  (file-name-sans-extension
;; 	   (file-name-nondirectory buffer-file-name)))))))
;;   (save-excursion
;;     (while (search-forward "|||" nil t)
;;       (save-restriction
;; 	(narrow-to-region (match-beginning 0) (match-end 0))
;; 	(replace-match
;; 	 (file-name-sans-extension
;; 	  (file-name-nondirectory buffer-file-name)))))))

;; ;; the same description how auto-update-header-file
;; (defun auto-update-source-file ()
;;   (save-excursion
;;     (while (search-forward "@@@" nil t)
;;       (save-restriction
;; 	(narrow-to-region (match-beginning 0) (match-end 0))
;; 	(replace-match
;; 	 (upcase
;; 	  (file-name-sans-extension
;; 	   (file-name-nondirectory buffer-file-name)))))))
;;   (save-excursion
;;     (while (search-forward "|||" nil t)
;;       (save-restriction
;; 	(narrow-to-region (match-beginning 0) (match-end 0))
;; 	(replace-match
;; 	 (file-name-sans-extension
;; 	  (file-name-nondirectory buffer-file-name)))))))

;; ;; the same description how auto-update-header-file
;; (defun auto-update-project-file ()
;;   (save-excursion
;;     (while (search-forward "@@@" nil t)
;;       (save-restriction
;; 	(narrow-to-region (match-beginning 0) (match-end 0))
;; 	(replace-match
;; 	 (downcase
;; 	  (file-name-sans-extension
;; 	   (file-name-nondirectory buffer-file-name)))))))
;;   (save-excursion
;;     (while (search-forward "OBJECTS_DIR" nil t)
;;       (save-excursion
;; 	(search-forward "=" nil t)
;; 	(save-restriction
;; 	  (if (not(file-exists-p "obj" ))
;; 	      (make-directory "obj"))))))
;;   (save-excursion
;;     (while (search-forward "|||" nil t)
;;       (save-restriction
;; 	(narrow-to-region (match-beginning 0) (match-end 0))
;; 	(replace-match
;; 	 (file-name-sans-extension
;; 	  (file-name-nondirectory buffer-file-name))))))
;;   (save-buffer)
;;   (shell-command (concat "tmake -o Makefile " buffer-file-name)))

;; (setq selection-coding-system 'compound-text-with-extensions)
;; ;;(standard-display-european 1) (set-input-mode nil nil 1)

;; (set-terminal-coding-system 'latin-1)
;; (set-keyboard-coding-system 'latin-1)
;; (set-language-environment 'latin-1)
;; (setq current-language-environment "French")



(setq c-default-style "linux")
(setq c-basic-offset 4)
(require 'cc-mode)

;; well, this does the job (just modified the basic-offset)
(add-to-list 'load-path "~/.emacs.d/site-lisp/google-c-style")
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)


;;not bad for c++
;; (add-hook 'c-mode-common-hook 'highlight-indentation-mode)
;; (add-hook 'c-mode-common-hook 'highlight-indentation-current-column-mode)

;; better
(require 'highlight-indent-guides)
(setq highlight-indent-guides-method 'character)
(add-hook 'c-mode-common-hook 'highlight-indent-guides-mode)

;; AGRESSIVE INDENT
(global-aggressive-indent-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; WIP TESTING

;; ;;helm-gtags, use gnu global
;; ;;; Enable helm-gtags-mode
;; (add-hook 'c-mode-hook 'helm-gtags-mode)
;; (add-hook 'c++-mode-hook 'helm-gtags-mode)
;; (add-hook 'python-mode-hook 'helm-gtags-mode)

;; ;; gtags customize
;; (custom-set-variables
;;  '(helm-gtags-path-style 'relative)
;;  '(helm-gtags-ignore-case t)
;;  '(helm-gtags-auto-update t))

;; ;; gtags key bindings
;; (eval-after-load "helm-gtags"
;;   '(progn
;;     (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
;;     (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
;;     (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
;;     (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
;;     (define-key helm-gtags-mode-map (kbd "C-x <") 'helm-gtags-previous-history)
;;     (define-key helm-gtags-mode-map (kbd "C-x >") 'helm-gtags-next-history)
;;     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)))


;; c++ auto include headers
(add-to-list 'load-path "~/.emacs.d/site-lisp/cpp-auto-include")
(require 'cpp-auto-include)
(add-hook 'c-mode-common-hook 'cpp-auto-include)

;; c/c++ header auto complete
(defun my:ac-c-header-init()
  (require 'auto-complete-c-headers)
  (add-to-list 'ac-sources 'ac-source-c-headers)
  (add-to-list 'achead:include-directories '"/usr/include")
  (add-to-list 'achead:include-directories '"/usr/local/include")

  )

(add-hook 'c++-mode-hook 'my:ac-c-header-init)
(add-hook 'c-mode-hook 'my:ac-c-header-init)

;; iedit, simultaneous editing different regions
(define-key global-map (kbd "C-c ;") 'iedit-mode)


;; company-mode auto completion
;; (add-hook 'after-init-hook 'global-company-mode)



;; =============
;; irony-mode
;; =============
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
;; =============
;; company mode
;; =============
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'company-mode)
;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
	      'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
	      'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)


;; (eval-after-load 'company
;;   '(add-to-list 'company-backends 'company-irony))
(require 'company-irony-c-headers)
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))

;; (optional) adds CC special commands to `company-begin-commands' in order to
;; trigger completion at interesting places, such as after scope operator
;;     std::|
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
;; =============
;; flycheck-mode
;; =============
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))


;; Doesn't work?
;; ;; flycheck rtags
;; (require 'flycheck-rtags)

;; (defun my-flycheck-rtags-setup ()
;;   (flycheck-select-checker 'rtags)
;;   (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
;;   (setq-local flycheck-check-syntax-automatically nil))
;; ;; c-mode-common-hook is also called by c++-mode
;; (add-hook 'c-mode-common-hook 'my-flycheck-rtags-setup)


;; rtags
(require 'rtags)
(add-hook 'c-mode-common-hook 'rtags-start-process-unless-running)
(add-hook 'c++-mode-common-hook 'rtags-start-process-unless-running)
;; cmake-ide (seems good)
(cmake-ide-setup)

;;;;;;;;;;;;;;;;;;;;;;;;
;; (require 'company-rtags)

;; (setq rtags-completions-enabled t)
;; (eval-after-load 'company
;;   '(add-to-list
;;     'company-backends 'company-rtags))
;; (setq rtags-autostart-diagnostics t)
;; (rtags-enable-standard-keybindings)
(require 'rtags-helm)
(setq rtags-use-helm t)

(define-key c-mode-base-map (kbd "M-t") (function rtags-find-symbol-at-point))
(define-key c-mode-base-map (kbd "M-r") (function rtags-location-stack-back))
(define-key c-mode-base-map (kbd "M-s") (function rtags-find-all-references-at-point))
(define-key c-mode-base-map (kbd "M-i") (function rtags-symbol-info))
(define-key c-mode-base-map (kbd "M-v") (function rtags-find-virtuals-at-point))



;; rtags or gtags if it doesn't work
;; (defun use-rtags (&optional useFileManager)
;;   (and (rtags-executable-find "rc")
;;        (cond ((not (gtags-get-rootpath)) t)
;;              ((and (not (eq major-mode 'c++-mode))
;;                    (not (eq major-mode 'c-mode))) (rtags-has-filemanager))
;;              (useFileManager (rtags-has-filemanager))
;;              (t (rtags-is-indexed)))))

;; (defun tags-find-symbol-at-point (&optional prefix)
;;   (interactive "P")
;;   (if (and (not (rtags-find-symbol-at-point prefix)) rtags-last-request-not-indexed)
;;       (gtags-find-tag)))
;; (defun tags-find-references-at-point (&optional prefix)
;;   (interactive "P")
;;   (if (and (not (rtags-find-references-at-point prefix)) rtags-last-request-not-indexed)
;;       (gtags-find-rtag)))
;; (defun tags-find-symbol ()
;;   (interactive)
;;   (call-interactively (if (use-rtags) 'rtags-find-symbol 'gtags-find-symbol)))
;; (defun tags-find-references ()
;;   (interactive)
;;   (call-interactively (if (use-rtags) 'rtags-find-references 'gtags-find-rtag)))
;; (defun tags-find-file ()
;;   (interactive)
;;   (call-interactively (if (use-rtags t) 'rtags-find-file 'gtags-find-file)))
;; (defun tags-imenu ()
;;   (interactive)
;;   (call-interactively (if (use-rtags t) 'rtags-imenu 'idomenu)))

;; (define-key c-mode-base-map (kbd "M-;") (function tags-find-symbol-at-point))
;; (define-key c-mode-base-map (kbd "M-,") (function tags-find-references-at-point))
;; (define-key c-mode-base-map (kbd "M-:") (function tags-find-file))
;; (define-key c-mode-base-map (kbd "C-.") (function tags-find-symbol))
;; (define-key c-mode-base-map (kbd "C-,") (function tags-find-references))
;; (define-key c-mode-base-map (kbd "C-<") (function rtags-find-virtuals-at-point))
;; (define-key c-mode-base-map (kbd "M-i") (function tags-imenu))

;; (define-key global-map (kbd "M-;") (function tags-find-symbol-at-point))
;; (define-key global-map (kbd "M-,") (function tags-find-references-at-point))
;; (define-key global-map (kbd "M-:") (function tags-find-file))
;; (define-key global-map (kbd "C-.") (function tags-find-symbol))
;; (define-key global-map (kbd "C-,") (function tags-find-references))
;; (define-key global-map (kbd "C-<") (function rtags-find-virtuals-at-point))
;; (define-key global-map (kbd "M-i") (function tags-imenu))
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; =============
;; eldoc-mode
;; =============
(add-hook 'irony-mode-hook 'irony-eldoc)
;; ==========================================
;; (optional) bind TAB for indent-or-complete
;; ==========================================
(defun irony--check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
	(backward-char 1)
	(if (looking-at "\\.") t
	    (backward-char 1)
	    (if (looking-at "->") t nil)))))
(defun irony--indent-or-complete ()
  "Indent or Complete"
  (interactive)
  (cond ((and (not (use-region-p))
	      (irony--check-expansion))
	 (message "complete")
	 (company-complete-common))
	(t
	 (message "indent")
	 (call-interactively 'c-indent-line-or-region))))
(defun irony-mode-keys ()
  "Modify keymaps used by `irony-mode'."
  (local-set-key (kbd "TAB") 'irony--indent-or-complete)
  (local-set-key [tab] 'irony--indent-or-complete))
(add-hook 'c-mode-common-hook 'irony-mode-keys)


;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
	      'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
	      'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;;company delay
(setq company-idle-delay 0)



;;;;;;;;;;;;;;;;;;;;;;;;;;



;;semantic auto-complete. Might be slow...

;; (semantic-mode 1)
;; (defun my:add-semantic-to-autocomplete()
;;   (add-to-list 'ac-sources 'ac-source-semantic)
;;   )
;; (add-hook 'c-mode-common-hook 'my:add-semantic-to-autocomplete)
;; (global-semanticdb-minor-mode 1)
;; (global-semantic-idle-scheduler-mode 1)
;; ;; (global-ede-mode t)

;; ;; parsing local directories for semantic
;; (defvar c-files-regex ".*\\.\\(c\\|cc\\|cpp\\|h\\|hh\\|hpp\\)"
;;   "A regular expression to match any c/c++ related files under a directory")

;; (defun my-semantic-parse-dir (root regex)
;;   "
;;    This function is an attempt of mine to force semantic to
;;    parse all source files under a root directory. Arguments:
;;    -- root: The full path to the root directory
;;    -- regex: A regular expression against which to match all files in the directory
;;   "
;;   (let (
;;         ;;make sure that root has a trailing slash and is a dir
;;         (root (file-name-as-directory root))
;;         (files (directory-files root t ))
;; 	)
;;     ;; remove current dir and parent dir from list
;;     (setq files (delete (format "%s." root) files))
;;     (setq files (delete (format "%s.." root) files))
;;     (while files
;;       (setq file (pop files))
;;       (if (not(file-accessible-directory-p file))
;;           ;;if it's a file that matches the regex we seek
;;           (progn (when (string-match-p regex file)
;; 		   (save-excursion
;; 		     (semanticdb-file-table-object file))
;; 		   ))
;;           ;;else if it's a directory
;;           (my-semantic-parse-dir file regex)
;; 	  )
;;       )
;;     )
;;   )

;; (defun my-semantic-parse-current-dir (regex)
;;   "
;;    Parses all files under the current directory matching regex
;;   "
;;   (my-semantic-parse-dir (file-name-directory(buffer-file-name)) regex)
;;   )

;; (defun lk-parse-curdir-c ()
;;   "
;;    Parses all the c/c++ related files under the current directory
;;    and inputs their data into semantic
;;   "
;;   (interactive)
;;   (my-semantic-parse-current-dir c-files-regex)
;;   )

;; (defun lk-parse-dir-c (dir)
;;   "Prompts the user for a directory and parses all c/c++ related files
;;    under the directory
;;   "
;;   (interactive (list (read-directory-name "Provide the directory to search in:")))
;;   (my-semantic-parse-dir (expand-file-name dir) c-files-regex)
;;   )

;; (provide 'lk-file-search)

;; ;; --semantic


(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t

 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )


;; (add-hook 'c-mode-hook '(lambda ()
;; 			  (c-toggle-auto-hungry-state t)))

					;(transient-mark-mode t)


					; # Mise en Couleur
(global-font-lock-mode t)

					; # Décoration rélgée au maximum
(setq font-lock-maximum-decoration t)

					; # Font taille maximale
(setq font-lock-maximum-size nil)

					; # Zone séléctionnée en surbrillance
(transient-mark-mode t)

(setq x-select-enable-clipboard t) ; handle standard clipboard

(set-foreground-color "grey80")
(set-background-color "black")

;; Show line-number in the mode line
(line-number-mode 1)

(global-set-key [home] 'beginning-of-buffer)
(global-set-key [end] 'end-of-buffer)

;; Show column-number in the mode line
(column-number-mode 1)

(require 'paren)
(show-paren-mode 1)
(setq-default hilight-paren-expression t)

;; fancy powerline
(require 'powerline)
(powerline-default-theme)

;(electric-indent-mode +1) ;a little annoying
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
(electric-pair-mode +1)




					; # Affichage Européen
					;(standard-display-european 1)

					; #  Binding des touches

					; # Touche 'Delete' définit pour supprimer le caractère placé après le
					; # curseur. Ne marche que sous console.
					; # (global-set-key [DEL] 'delete-char)

					; # Va en début de ligne (au lieu du début du fichier)
					; # (global-set-key [home] 'beginning-of-line)

					; # Va en fin de ligne (au lieu de la fin du fichier)
					; # (global-set-key [end] 'end-of-line)

					; # Permet d'atteindre la ligne x
					; (global-set-key (read-kbd-macro "C-c l") goto-line)
					;(define-key global-map "\C-xg"  'goto-line)

					;(setq gnus-select-method '(nntp "127.0.0.1"))

					; # css-mode
					; # (autoload 'css-mode "css-mode")
					; # (setq auto-mode-alist
					; #	(cons '("\\.css\\'" . css-mode) auto-mode-alist))

					; # retour a la ligne auto
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-off-auto-fill)

					; # Scrolling verticale
					;(setq-default scroll-conservatively 5)
					;(setq-default scroll-step 1)




					; affichage caractere sur 8bit
					; (standard-display-european t)
					; iso-latin1
					; (require 'iso-syntax)
					; c-x 8 comme touche compose
					; (require 'iso-insert)  ;ou iso-transl

					; # Mode php
					; # (autoload 'php-mode "php-mode" "PHP editing mode" t)
					; # (add-to-list 'auto-mode-alist '("\\.php3$" . php-mode ))

					; # Pour éviter la sauvegarde automatique
					; # (auto-save-mode 0)
					; # (setq make-backup-files nil)

					; EOF

					;(require 'tex-site)




(put 'downcase-region 'disabled nil)

(put 'upcase-region 'disabled nil)

(defun word-count nil "Count words in buffer" (interactive)
(shell-command-on-region (point-min) (point-max) "wc -w"))





;; ;;ECB
;; (add-to-list 'load-path
;;                      "~/.emacs.d/site-lisp/ecb-2.40")
;;  (require 'ecb-autoloads)
;; ;; CEDET with emacs23


;; bugfix for emacs24
(setq stack-trace-on-error t)

;; (add-to-list 'load-path
;;                      "~/.emacs.d/site-lisp/cedet-1.1/semantic")
;; (add-to-list 'load-path
;;                      "~/.emacs.d/site-lisp/cedet-1.1/common")

;; (setq integrated-cedet-p (and (>= emacs-major-version 23)
;;                               (>= emacs-minor-version 2)))

;; ;; (unless integrated-cedet-p
;; ;;   (progn
;; ;;     (setq cedet-lib "/path/foo")
;; ;;     (setq cedet-info-dir "/path/bar")))

;; (if (boundp 'cedet-info-dir)
;;     (add-to-list 'Info-default-directory-list cedet-info-dir))

;; (if (boundp 'cedet-lib)
;;     (load-file cedet-lib))

;; (semantic-mode 1)

;; (global-ede-mode t)

;; (if (boundp 'semantic-load-enable-excessive-code-helpers)
;;     ; Add-on CEDET
;;     ;; (progn
;;     ;;   (semantic-load-enable-excessive-code-helpers)
;;     ;;   ; TODO: should already be enabled by previous line
;;     ;;   ;(global-semantic-idle-completions-mode)
;;     ;;   ;(global-semantic-tag-folding-mode)
;;     ;;   )
;;    ; Integrated CEDET
;;   (setq semantic-default-submodes
;;         '(global-semanticdb-minor-mode
;;           global-semantic-idle-scheduler-mode
;;           global-semantic-idle-summary-mode
;;           global-semantic-idle-completions-mode
;;           global-semantic-decoration-mode
;;           global-semantic-highlight-func-mode
;;           global-semantic-stickyfunc-mode)))


;; (if (boundp 'semantic-ia) (require 'semantic-ia))
;; (if (boundp 'semantic-gcc) (require 'semantic-gcc))




;; ;; ;; Load CEDET
;; ;;(load-file "/usr/share/emacs/23.3/lisp/cedet/cedet.el")
;; ;;(load-file "~/divers/cedet-1.1/common/cedet.el")
;; ;;(load-file "~/.emacs.d/cedet-1.1/common/cedet.el")

;; ;;(global-ede-mode 'nil)                  ; do NOT use project manager
;; ;;(global-ede-mode t)
;; ;;(semantic-load-enable-excessive-code-helpers)

;; ;; ;;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
;; ;; (require 'semantic-ia)          ; names completion and display of tags
;; ;; (require 'semantic-gcc)         ; auto locate system include files
;; ;; (require 'semanticdb)
;; ;; (global-semanticdb-minor-mode 1)

;; (defun my-cedet-hook ()
;;   (local-set-key [(control return)] 'semantic-ia-complete-symbol)
;;   (local-set-key "\C-c?" 'semantic-ia-complete-symbol-menu)
;;   (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
;;   (local-set-key "\C-c=" 'semantic-decoration-include-visit)
;;   (local-set-key "\C-cj" 'semantic-ia-fast-jump)
;;   (local-set-key "\C-cq" 'semantic-ia-show-doc)
;;   (local-set-key "\C-cs" 'semantic-ia-show-summary)
;;   (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
;;   (local-set-key "\C-c+" 'semantic-tag-folding-show-block)
;;   (local-set-key "\C-c-" 'semantic-tag-folding-fold-block)
;;   (local-set-key "\C-c\C-c+" 'semantic-tag-folding-show-all)
;;   (local-set-key "\C-c\C-c-" 'semantic-tag-folding-fold-all)
;;   )
;; (add-hook 'c-mode-common-hook 'my-cedet-hook)

;; ;;(global-semantic-tag-folding-mode 1)

;; ;;(require 'eassist)

;; ;(concat essist-header-switches ("hh" "cc"))
;; ;; (defun alexott/c-mode-cedet-hook ()
;; ;;   (local-set-key "\C-ct" 'eassist-switch-h-cpp)
;; ;;   (local-set-key "\C-xt" 'eassist-switch-h-cpp)
;; ;;   (local-set-key "\C-ce" 'eassist-list-methods)
;; ;;   (local-set-key "\C-c\C-r" 'semantic-symref)
;; ;;   )
;; ;; (add-hook 'c-mode-common-hook 'alexott/c-mode-cedet-hook)

;; ;; gnu global support
;; ;(require 'semanticdb-global)
;; (semanticdb-enable-gnu-global-databases 'c-mode)
;; (semanticdb-enable-gnu-global-databases 'c++-mode)

;; ctags
					;(require 'semanticdb-ectag)
					;(semantic-load-enable-primary-exuberent-ctags-support)

					;(global-semantic-idle-tag-highlight-mode 1)









;;;;;;;;;old
;; ;; Enabling various SEMANTIC minor modes.  See semantic/INSTALL for more ideas.
;; ;; Select one of the following
;; ;; semantic

;; (global-ede-mode 1)                      ; Enable the Project management system
;; ;;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
;; (semantic-load-enable-minimum-features)

;; (setq semantic-idle-scheduler-idle-time 600)

;; (require 'semanticdb)
;; (global-semanticdb-minor-mode 1)

;; ;;(setq semanticdb-default-save-directory "~/.emacs.d/.semantic.cache")
;; ;;(add-to-list 'load-path "~/.emacs.d/semantic")
;; (setq semantic-load-turn-everything-on t)
;; ;;(require 'semantic-load)
;; (require 'semantic-ia)

;; (global-set-key [(meta tab)] 'semantic-ia-complete-symbol)
;; (global-set-key [(control meta tab)] 'semantic-ia-complete-symbol-menu)
;; (global-set-key [M-S-iso-lefttab] 'semantic-complete-analyze-inline)


;; ;; (semantic-load-enable-code-helpers)
;; ;; (semantic-load-enable-guady-code-helpers)
;; ;; (semantic-load-enable-excessive-code-helpers)

;; ;; Enable this if you develop in semantic, or develop grammars
;; ;; (semantic-load-enable-semantic-debugging-helpers)

;; ;;ECB

;; (add-to-list 'load-path
;; 	     "/usr/share/emacs/site-lisp/ecb/")


;; ;; (require 'ecb-autoloads)
;; (custom-set-variables
;;   ;; custom-set-variables was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(case-fold-search t)
;; ; '(current-language-environment "UTF-8")
;; ; '(default-input-method "rfc1345")
;;  '(ecb-options-version "2.32")
;;  '(global-font-lock-mode t nil (font-lock))
;;  '(inhibit-startup-screen t)
;;  '(text-mode-hook (quote (turn-on-auto-fill (lambda nil (ispell-minor-mode 1)) text-mode-hook-identify)))
;;  '(transient-mark-mode t))
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  )


					;(setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
					;    (setq interpreter-mode-alist (cons '("python" . python-mode)
					;                                       interpreter-mode-alist))
					;    (autoload 'python-mode "python-mode" "Python editing mode." t)



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
